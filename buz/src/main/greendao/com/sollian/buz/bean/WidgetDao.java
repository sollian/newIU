package com.sollian.buz.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WIDGET".
*/
public class WidgetDao extends AbstractDao<Widget, Long> {

    public static final String TABLENAME = "WIDGET";

    /**
     * Properties of entity Widget.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GId = new Property(0, Long.class, "gId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property ArticleIds = new Property(3, String.class, "articleIds", false, "ARTICLE_IDS");
    }

    private DaoSession daoSession;


    public WidgetDao(DaoConfig config) {
        super(config);
    }
    
    public WidgetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WIDGET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: gId
                "\"NAME\" TEXT," + // 1: name
                "\"TITLE\" TEXT," + // 2: title
                "\"ARTICLE_IDS\" TEXT);"); // 3: articleIds
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WIDGET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Widget entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String articleIds = entity.getArticleIds();
        if (articleIds != null) {
            stmt.bindString(4, articleIds);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Widget entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String articleIds = entity.getArticleIds();
        if (articleIds != null) {
            stmt.bindString(4, articleIds);
        }
    }

    @Override
    protected final void attachEntity(Widget entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Widget readEntity(Cursor cursor, int offset) {
        Widget entity = new Widget( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // articleIds
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Widget entity, int offset) {
        entity.setGId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArticleIds(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Widget entity, long rowId) {
        entity.setGId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Widget entity) {
        if(entity != null) {
            return entity.getGId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Widget entity) {
        return entity.getGId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
