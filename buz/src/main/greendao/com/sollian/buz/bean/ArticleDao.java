package com.sollian.buz.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE".
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GId = new Property(0, Long.class, "gId", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Group_id = new Property(2, int.class, "group_id", false, "GROUP_ID");
        public final static Property Reply_id = new Property(3, int.class, "reply_id", false, "REPLY_ID");
        public final static Property Flag = new Property(4, String.class, "flag", false, "FLAG");
        public final static Property Is_top = new Property(5, boolean.class, "is_top", false, "IS_TOP");
        public final static Property Is_subject = new Property(6, boolean.class, "is_subject", false, "IS_SUBJECT");
        public final static Property Has_attachment = new Property(7, boolean.class, "has_attachment", false, "HAS_ATTACHMENT");
        public final static Property Is_admin = new Property(8, boolean.class, "is_admin", false, "IS_ADMIN");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Post_time = new Property(10, long.class, "post_time", false, "POST_TIME");
        public final static Property Board_name = new Property(11, String.class, "board_name", false, "BOARD_NAME");
        public final static Property Content = new Property(12, String.class, "content", false, "CONTENT");
        public final static Property Previous_id = new Property(13, int.class, "previous_id", false, "PREVIOUS_ID");
        public final static Property Next_id = new Property(14, int.class, "next_id", false, "NEXT_ID");
        public final static Property Threads_previous_id = new Property(15, int.class, "threads_previous_id", false, "THREADS_PREVIOUS_ID");
        public final static Property Threads_next_id = new Property(16, int.class, "threads_next_id", false, "THREADS_NEXT_ID");
        public final static Property Reply_count = new Property(17, int.class, "reply_count", false, "REPLY_COUNT");
        public final static Property UserId = new Property(18, String.class, "userId", false, "USER_ID");
        public final static Property Photos = new Property(19, String.class, "photos", false, "PHOTOS");
        public final static Property IsReaded = new Property(20, boolean.class, "isReaded", false, "IS_READED");
        public final static Property IsCollected = new Property(21, boolean.class, "isCollected", false, "IS_COLLECTED");
    }

    private DaoSession daoSession;


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: gId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"GROUP_ID\" INTEGER NOT NULL ," + // 2: group_id
                "\"REPLY_ID\" INTEGER NOT NULL ," + // 3: reply_id
                "\"FLAG\" TEXT," + // 4: flag
                "\"IS_TOP\" INTEGER NOT NULL ," + // 5: is_top
                "\"IS_SUBJECT\" INTEGER NOT NULL ," + // 6: is_subject
                "\"HAS_ATTACHMENT\" INTEGER NOT NULL ," + // 7: has_attachment
                "\"IS_ADMIN\" INTEGER NOT NULL ," + // 8: is_admin
                "\"TITLE\" TEXT," + // 9: title
                "\"POST_TIME\" INTEGER NOT NULL ," + // 10: post_time
                "\"BOARD_NAME\" TEXT," + // 11: board_name
                "\"CONTENT\" TEXT," + // 12: content
                "\"PREVIOUS_ID\" INTEGER NOT NULL ," + // 13: previous_id
                "\"NEXT_ID\" INTEGER NOT NULL ," + // 14: next_id
                "\"THREADS_PREVIOUS_ID\" INTEGER NOT NULL ," + // 15: threads_previous_id
                "\"THREADS_NEXT_ID\" INTEGER NOT NULL ," + // 16: threads_next_id
                "\"REPLY_COUNT\" INTEGER NOT NULL ," + // 17: reply_count
                "\"USER_ID\" TEXT," + // 18: userId
                "\"PHOTOS\" TEXT," + // 19: photos
                "\"IS_READED\" INTEGER NOT NULL ," + // 20: isReaded
                "\"IS_COLLECTED\" INTEGER NOT NULL );"); // 21: isCollected
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ARTICLE_ID ON \"ARTICLE\"" +
                " (\"ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getGroup_id());
        stmt.bindLong(4, entity.getReply_id());
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(5, flag);
        }
        stmt.bindLong(6, entity.getIs_top() ? 1L: 0L);
        stmt.bindLong(7, entity.getIs_subject() ? 1L: 0L);
        stmt.bindLong(8, entity.getHas_attachment() ? 1L: 0L);
        stmt.bindLong(9, entity.getIs_admin() ? 1L: 0L);
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
        stmt.bindLong(11, entity.getPost_time());
 
        String board_name = entity.getBoard_name();
        if (board_name != null) {
            stmt.bindString(12, board_name);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
        stmt.bindLong(14, entity.getPrevious_id());
        stmt.bindLong(15, entity.getNext_id());
        stmt.bindLong(16, entity.getThreads_previous_id());
        stmt.bindLong(17, entity.getThreads_next_id());
        stmt.bindLong(18, entity.getReply_count());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(19, userId);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(20, photos);
        }
        stmt.bindLong(21, entity.getIsReaded() ? 1L: 0L);
        stmt.bindLong(22, entity.getIsCollected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getGroup_id());
        stmt.bindLong(4, entity.getReply_id());
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(5, flag);
        }
        stmt.bindLong(6, entity.getIs_top() ? 1L: 0L);
        stmt.bindLong(7, entity.getIs_subject() ? 1L: 0L);
        stmt.bindLong(8, entity.getHas_attachment() ? 1L: 0L);
        stmt.bindLong(9, entity.getIs_admin() ? 1L: 0L);
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
        stmt.bindLong(11, entity.getPost_time());
 
        String board_name = entity.getBoard_name();
        if (board_name != null) {
            stmt.bindString(12, board_name);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
        stmt.bindLong(14, entity.getPrevious_id());
        stmt.bindLong(15, entity.getNext_id());
        stmt.bindLong(16, entity.getThreads_previous_id());
        stmt.bindLong(17, entity.getThreads_next_id());
        stmt.bindLong(18, entity.getReply_count());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(19, userId);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(20, photos);
        }
        stmt.bindLong(21, entity.getIsReaded() ? 1L: 0L);
        stmt.bindLong(22, entity.getIsCollected() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(Article entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gId
            cursor.getInt(offset + 1), // id
            cursor.getInt(offset + 2), // group_id
            cursor.getInt(offset + 3), // reply_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // flag
            cursor.getShort(offset + 5) != 0, // is_top
            cursor.getShort(offset + 6) != 0, // is_subject
            cursor.getShort(offset + 7) != 0, // has_attachment
            cursor.getShort(offset + 8) != 0, // is_admin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.getLong(offset + 10), // post_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // board_name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // content
            cursor.getInt(offset + 13), // previous_id
            cursor.getInt(offset + 14), // next_id
            cursor.getInt(offset + 15), // threads_previous_id
            cursor.getInt(offset + 16), // threads_next_id
            cursor.getInt(offset + 17), // reply_count
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // userId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // photos
            cursor.getShort(offset + 20) != 0, // isReaded
            cursor.getShort(offset + 21) != 0 // isCollected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setGId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setGroup_id(cursor.getInt(offset + 2));
        entity.setReply_id(cursor.getInt(offset + 3));
        entity.setFlag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIs_top(cursor.getShort(offset + 5) != 0);
        entity.setIs_subject(cursor.getShort(offset + 6) != 0);
        entity.setHas_attachment(cursor.getShort(offset + 7) != 0);
        entity.setIs_admin(cursor.getShort(offset + 8) != 0);
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPost_time(cursor.getLong(offset + 10));
        entity.setBoard_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPrevious_id(cursor.getInt(offset + 13));
        entity.setNext_id(cursor.getInt(offset + 14));
        entity.setThreads_previous_id(cursor.getInt(offset + 15));
        entity.setThreads_next_id(cursor.getInt(offset + 16));
        entity.setReply_count(cursor.getInt(offset + 17));
        entity.setUserId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPhotos(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsReaded(cursor.getShort(offset + 20) != 0);
        entity.setIsCollected(cursor.getShort(offset + 21) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setGId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getGId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Article entity) {
        return entity.getGId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
