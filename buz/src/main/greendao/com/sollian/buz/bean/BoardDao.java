package com.sollian.buz.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOARD".
*/
public class BoardDao extends AbstractDao<Board, Long> {

    public static final String TABLENAME = "BOARD";

    /**
     * Properties of entity Board.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GId = new Property(0, Long.class, "gId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Section = new Property(3, String.class, "section", false, "SECTION");
        public final static Property Is_no_reply = new Property(4, boolean.class, "is_no_reply", false, "IS_NO_REPLY");
        public final static Property Allow_attachment = new Property(5, boolean.class, "allow_attachment", false, "ALLOW_ATTACHMENT");
        public final static Property Allow_post = new Property(6, boolean.class, "allow_post", false, "ALLOW_POST");
        public final static Property Allow_anonymous = new Property(7, boolean.class, "allow_anonymous", false, "ALLOW_ANONYMOUS");
    }

    private DaoSession daoSession;


    public BoardDao(DaoConfig config) {
        super(config);
    }
    
    public BoardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: gId
                "\"NAME\" TEXT," + // 1: name
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"SECTION\" TEXT," + // 3: section
                "\"IS_NO_REPLY\" INTEGER NOT NULL ," + // 4: is_no_reply
                "\"ALLOW_ATTACHMENT\" INTEGER NOT NULL ," + // 5: allow_attachment
                "\"ALLOW_POST\" INTEGER NOT NULL ," + // 6: allow_post
                "\"ALLOW_ANONYMOUS\" INTEGER NOT NULL );"); // 7: allow_anonymous
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BOARD_NAME ON \"BOARD\"" +
                " (\"NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Board entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String section = entity.getSection();
        if (section != null) {
            stmt.bindString(4, section);
        }
        stmt.bindLong(5, entity.getIs_no_reply() ? 1L: 0L);
        stmt.bindLong(6, entity.getAllow_attachment() ? 1L: 0L);
        stmt.bindLong(7, entity.getAllow_post() ? 1L: 0L);
        stmt.bindLong(8, entity.getAllow_anonymous() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Board entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String section = entity.getSection();
        if (section != null) {
            stmt.bindString(4, section);
        }
        stmt.bindLong(5, entity.getIs_no_reply() ? 1L: 0L);
        stmt.bindLong(6, entity.getAllow_attachment() ? 1L: 0L);
        stmt.bindLong(7, entity.getAllow_post() ? 1L: 0L);
        stmt.bindLong(8, entity.getAllow_anonymous() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(Board entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Board readEntity(Cursor cursor, int offset) {
        Board entity = new Board( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // section
            cursor.getShort(offset + 4) != 0, // is_no_reply
            cursor.getShort(offset + 5) != 0, // allow_attachment
            cursor.getShort(offset + 6) != 0, // allow_post
            cursor.getShort(offset + 7) != 0 // allow_anonymous
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Board entity, int offset) {
        entity.setGId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSection(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_no_reply(cursor.getShort(offset + 4) != 0);
        entity.setAllow_attachment(cursor.getShort(offset + 5) != 0);
        entity.setAllow_post(cursor.getShort(offset + 6) != 0);
        entity.setAllow_anonymous(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Board entity, long rowId) {
        entity.setGId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Board entity) {
        if(entity != null) {
            return entity.getGId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Board entity) {
        return entity.getGId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
