<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <property name="severity" value="warning"/>
    <property name="localeCountry" value="CN"/>
    <property name="localeLanguage" value="cn"/>

    <!--<module name="SuppressionFilter">-->
    <!--<property name="file" value="${check.filter.file}"/>-->
    <!--</module>-->
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <!--<module name="JavadocPackage"/>-->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <!-- 检查文件是否以一个新行结束-->
    <!--<module name="NewlineAtEndOfFile"/>-->

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <!-- 检查**.properties配置文件 是否有没有设值的key-->
    <module name="Translation"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <!-- 检查文件的长度 default max=2000 -->
    <!--<module name="FileLength"/>-->

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <!-- 检查文件中是否含有'\t'-->
    <module name="FileTabCharacter"/>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <!--<module name="RegexpSingleline">-->
    <!--<property name="format" value="\s+$"/>-->
    <!--<property name="minimum" value="0"/>-->
    <!--<property name="maximum" value="0"/>-->
    <!--<property name="message" value="Line has trailing spaces."/>-->
    <!--</module>-->

    <module name="TreeWalker">

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!--<module name="JavadocMethod">-->
        <!--<property name="logLoadErrors" value="true"/>-->
        <!--<property name="suppressLoadErrors" value="true"/>-->
        <!--</module>-->
        <!--<module name="JavadocType"/>-->
        <!-- Checks that variables have Javadoc comments. -->
        <!--<module name="JavadocVariable"/>-->
        <!--<module name="JavadocStyle"/>-->


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
        <!-- The follow property value demonstrates the ability     -->
        <!-- to have access to ANT properties. In this case it uses -->
        <!-- the ${basedir} property to allow Checkstyle to be run  -->
        <!-- from any directory within a project. See property      -->
        <!-- expansion,                                             -->
        <!-- http://checkstyle.sf.net/config.html#properties        -->
        <!-- <property                                              -->
        <!--     name="headerFile"                                  -->
        <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <!--<module name="AvoidStarImport"/>-->
        <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport"/>
        <!-- 检查是否导入的包没有使用-->
        <module name="UnusedImports"/>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <!--<module name="LineLength">-->
        <!--<property name="max" value="100"/>-->
        <!--</module>-->
        <!-- Checks for long methods and constructors. max default 150. max=80设置长度80 -->
        <!--<module name="MethodLength"/>-->
        <!-- Checks the number of parameters of a method or constructor. max default 7. -->
        <!--<module name="ParameterNumber"/>-->


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <!-- 检查for iterator语句是否使用空格
          option: 定义初始化语句是否使用空格，
          例如：space表示使用空格，则
          for(Iterator iterator = List.iterator(); iterator.hasNext(); iterator.next())
          就是形式合理的，否则就是形式不合理的-->
        <!--<module name="EmptyForIteratorPad"/>-->
        <!--检查<和>周围的空白。-->
        <!--<module name="GenericWhitespace"/>-->
        <!-- 检查方法参数的格式
         allowLineBreaks: 参数是否允许在不同行（注：没有作用）
         option: 在参数和括号、参数和标识符之间是否包含空格-->
        <!--<module name="MethodParamPad"/>-->
        <!--检查分隔符后的空白。-->
        <!--<module name="NoWhitespaceAfter"/>-->
        <!--<module name="NoWhitespaceBefore"/>-->
        <!-- 检查运算符是否在应在同一行
        option: 定义运算符的位置，eol在同一行，nl在下一行
        tokens: 定义检查的类型-->
        <!--<module name="OperatorWrap"/>-->
        <!-- 检查左小括号'('后边和右小括号')'前边是否有空格
         option: space表示有空格，nospace表示没有空格
         tokens: 定义检查的类型-->
        <module name="ParenPad"/>
        <!-- Checks the policy on the padding of parentheses for typecasts.
        That is, whether a space is required after a left parenthesis and before a right parenthesis,
        or such spaces are forbidden. -->
        <module name="TypecastParenPad"/>
        <!-- 检查类型后是否包含空格 Checks that a token is followed by whitespace.
              tokens: 检查的类型 -->
        <!--<module name="WhitespaceAfter"/>-->
        <!-- Checks that a token is surrounded by whitespace.-->
        <!--<module name="WhitespaceAround"/>-->


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <!-- ModifierOrder 检查修饰符的顺序，
        默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native,strictfp-->
        <module name="ModifierOrder"/>
        <!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰
                  tokens: 检查的类型 -->
        <module name="RedundantModifier"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <!-- 检查是否有嵌套的代码块
             allowInSwitchCase: 定义是否允许switch case中使用嵌套的代码块 -->
        <!--<module name="AvoidNestedBlocks"/>-->
        <!-- 检查是否有空代码块
           option: 定义代码块中应该包含的内容，例如：stmt表示语句
           tokens: 检查的类型-->
        <module name="EmptyBlock"/>
        <!--option: 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示
          maxLineLength: 大括号'{'所在行行最多容纳的字符数
          tokens: 该属性适用的类型，例：CLASS_DEF,INTERFACE_DEF,METHOD_DEF,CTOR_DEF -->
        <!--<module name="LeftCurly"/>-->
        <!-- NeedBraces 检查是否应该使用括号的地方没有加括号
            tokens: 定义检查的类型 -->
        <module name="NeedBraces"/>
        <!-- Checks the placement of right curly braces ('}') for  else, try, and catch tokens. The policy to verify is specified using property  option.
             option: 右大括号是否单独一行显示
             tokens: 定义检查的类型  -->
        <!--<module name="RightCurly"/>-->


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!-- 检查是否在同一行初始化， 例如：private int Age = nGe==1 ? 100 : 0; 就应该避免。
        该选项会提示避免使用三元表达式-->
        <!--<module name="AvoidInlineConditionals"/>-->
        <!--Detects empty statements (standalone ;). -->
        <module name="EmptyStatement"/>
        <!--检查在判断字符串是否相等时是否使用了正确的形式-->
        <module name="StringLiteralEquality"/>
        <!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
        <module name="EqualsHashCode"/>
        <!-- Checks that a local variable or a parameter does not shadow a field that is defined in the same class.-->
        <!--检查局部变量或参数是否隐藏了类中的变量。-->
        <!--<module name="HiddenField"/>-->
        <!--  Checks for illegal instantiations where a factory method is preferred.  -->
        <!--检查是否使用工厂方法实例化。-->
        <module name="IllegalInstantiation"/>
        <!--  Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);. -->
        <module name="InnerAssignment"/>
        <!-- Checks that there are no "magic numbers", where a magic number is a numeric literal that is not defined as a constant. By default, -1, 0, 1, and 2 are not considered to be magic numbers. -->
        <!--<module name="MagicNumber"/>-->
        <!--检查switch语句是否有‘default’从句-->
        <module name="MissingSwitchDefault"/>
        <!--检查switch中default是否在所有case的后面-->
        <module name="DefaultComesLast"/>
        <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue-->
        <module name="FallThrough"/>
        <!-- Checks for redundant exceptions declared in throws clause such as duplicates, unchecked exceptions or subclasses of another declared exception.
        检查是否抛出了多余的异常 -->
        <!--<module name="RedundantThrows">-->
        <!--<property name="logLoadErrors" value="true"/>-->
        <!--<property name="suppressLoadErrors" value="true"/>-->
        <!--</module>-->
        <!--  Checks for overly complicated boolean expressions. Currently finds code like  if (b == true), b || true, !false, etc.-->
        <!--     检查boolean值是否冗余的地方    -->
        <module name="SimplifyBooleanExpression"/>
        <!--  检查是否存在过度复杂的boolean返回值  -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!--检查子类是否非法破坏了父类或接口的限制条件-->
        <!--<module name="DesignForExtension"/>-->
        <!--只有私有构造器的类必须声明为final-->
        <module name="FinalClass"/>
        <!--确保Utils类（只提供static方法和属性的类）没有public构造器。-->
        <module name="HideUtilityClassConstructor"/>
        <!--不允许interface像java.ioSerializable一样只作为标记，不包含任何methods和constants。-->
        <module name="InterfaceIsType"/>
        <!--检查class成员属性可见性。只有static final 修饰的成员是可以public的
        。其他的成员属性必需是private的，除非属性protectedAllowed或者packageAllowed设置了true.  -->
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
            <property name="packageAllowed" value="true"/>
        </module>


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <!--检查再定义数组时，采用java风格还是c风格，例如：int[] num是java风格，int num[]是c风格。默认是java风格-->
        <module name="ArrayTypeStyle"/>
        <!-- 检查method/constructor/catch块中的参数是否是final修饰的。 -->
        <!--<module name="FinalParameters"/>-->
        <!--检查是否存在TODO（待处理） TODO是javaIDE自动生成的。一般代码写完后要去掉。-->
        <module name="TodoComment"/>
        <!--检查是否在long类型是否定义了大写的L.字母小写l和数字1（一）很相似。 -->
        <module name="UpperEll"/>


        <!--检查循环控制变量是否被修改-->
        <module name="ModifiedControlVariable"/>
        <!--检查变量值没有改动的情况下，该变量是否定义成了final-->
        <!--<module name="FinalLocalVariable"/>-->
        <!--检查一次声明多个变量时，变量是否在同一行或者在同一个语句中-->
        <module name="MultipleVariableDeclarations"/>
        <!--检查是否使用了this
            checkFields: 是否检查变量引用
            checkMethods: 是否检查方法调用-->
        <module name="RequireThis"/>
        <!--检查是否使用了多余的小括号-->
        <module name="UnnecessaryParentheses"/>
        <!--检查文件中是否存在相应的文字
            format: 定义所匹配的形式 -->
        <!--<module name="RequiredRegexp"/>-->
        <!--检查代码的缩进是否符合要求
            basicOffset: 定义代码体相对于所属的代码体的缩进量
            braceAdjustment: 定义括号的缩进量
            caseIndent: 定义case的缩进量 -->
        <!--<module name="Indentation"/>-->
        <!--检查是否有没有被注掉或者删除的main方法
            excludedClasses: 定义可以带main方法的类所匹配的名字形式 -->
        <!--<module name="UncommentedMain"/>-->
        <!--max: 布尔运算符在一条语句中允许出现的最大数目 -->
        <!--<module name="BooleanExpressionComplexity"/>-->
        <!--检查类中是否有代码复制的问题
            min: 允许代码重复的最小行数
            charset: 文件所用的字符集-->
        <!--<module name="StrictDuplicateCode"/>-->
        <!--检查抛出异常的数量
            max: 定义抛出异常的最大数目-->
        <!--<module name="ThrowsCount">-->
        <!--<property name="max" value="3"-->
        <!--</module>-->
        <!--检查类中是否显式定义了构造器-->
        <!--<module name="MissingCtor"/>-->

    </module>

</module>
